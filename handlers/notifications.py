import datetime
import logging
import uuid
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from database.repository import save_notification, get_user_notifications, delete_notification, get_job_id
from services.scheduler import schedule_notification, cancel_notification
from keyboards.inline import get_notifications_keyboard
from nlp.time_parser import TimeParser
from nlp.intent_recognizer import IntentRecognizer

logger = logging.getLogger(__name__)
router = Router()

time_parser = TimeParser()
intent_recognizer = IntentRecognizer()

@router.message(Command("list"))
async def cmd_list(message: Message):
    await show_notifications_list(message)

@router.callback_query(F.data.startswith("delete_"))
async def process_delete_callback(callback: CallbackQuery):
    notification_id = int(callback.data.split("_")[1])
    
    job_id = get_job_id(notification_id)
    
    if job_id and delete_notification(notification_id):
        cancel_notification(job_id)
        
        await callback.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É–¥–∞–ª–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id}")
        
        await update_notifications_list(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}")

@router.message()
async def process_natural_language(message: Message):
    intent = intent_recognizer.recognize_intent(message.text)
    
    if not intent:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π c–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É.\n\n"
            f"<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n"
            f"- <i>–ß–µ—Ä–µ–∑ 17 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –õ—é–±–∏–º–æ–π</i>\n"
            f"- <i>–í 18:30 –≤—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–≥–æ–º</i>\n"
            f"- <i>–ó–∞–≤—Ç—Ä–∞ –≤ 10:00 –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç</i>\n\n"
            f"–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:\n"
            f"<b>/list</b> - –ø–æ–∫–∞–∂–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n",
            parse_mode="HTML"
        )
        return
    
    if intent['intent'] == 'create_reminder':
        parsed_data = time_parser.parse_time(intent['text'])
        
        if parsed_data:
            notification_time, notification_text = parsed_data
            
            if notification_time <= datetime.datetime.now():
                await message.answer(
                    "‚ö†Ô∏è –Ø –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è."
                )
                return
            
            await create_notification(message, notification_text, notification_time)
        else:
            await message.answer(
                "‚è∞ –ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ!"
            )
    
    elif intent['intent'] == 'list_reminders':
        await show_notifications_list(message)
    
    elif intent['intent'] == 'cancel_reminder':
        await show_notifications_list(message, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

async def create_notification(message: Message, notification_text: str, notification_time: datetime.datetime):
    job_id = f"notification_{message.from_user.id}_{str(uuid.uuid4())[:8]}"
    
    notification_id = save_notification(
        message.from_user.id,
        notification_text,
        notification_time,
        job_id
    )
    
    schedule_notification(
        message.from_user.id,
        notification_text,
        notification_time,
        notification_id,
        job_id
    )
    
    time_delta = notification_time - datetime.datetime.now()
    minutes = int(time_delta.total_seconds() / 60)
    hours = minutes // 60
    minutes = minutes % 60
    
    time_str = notification_time.strftime("%d.%m.%Y %H:%M:%S")
    
    if hours > 0 and minutes > 0:
        time_left = f"—á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω"
    elif hours > 0:
        time_left = f"—á–µ—Ä–µ–∑ {hours} —á"
    else:
        time_left = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω"
    
    await message.answer(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"üìù <b>{notification_text}</b>\n"
        f"‚è∞ {time_str} ({time_left})",
        parse_mode="HTML"
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ–∑–¥–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –Ω–∞ {time_str}")

async def show_notifications_list(message: Message, header_text: str = None):
    notifications = get_user_notifications(message.from_user.id)
    
    if not notifications:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø—É—Å—Ç–æ)")
        return
    
    text = header_text or "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
    
    for idx, (notification_id, notification_text, notification_time, _) in enumerate(notifications, start=1):
        time_obj = datetime.datetime.fromisoformat(notification_time)
        time_str = time_obj.strftime("%d.%m.%Y %H:%M")

        time_delta = time_obj - datetime.datetime.now()
        minutes = int(time_delta.total_seconds() / 60)
        hours = minutes // 60
        minutes = minutes % 60
        
        if hours > 0 and minutes > 0:
            time_left = f"—á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω"
        elif hours > 0:
            time_left = f"—á–µ—Ä–µ–∑ {hours} —á"
        else:
            time_left = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω"
        
        text += f"{idx}. <b>{notification_text}</b>\n‚è∞ {time_str} ({time_left})\n\n"
    
    keyboard = get_notifications_keyboard(notifications)
    
    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ({len(notifications)} —à—Ç.)")

async def update_notifications_list(callback: CallbackQuery):
    notifications = get_user_notifications(callback.from_user.id)
    
    if not notifications:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
    
    for idx, (notification_id, notification_text, notification_time, _) in enumerate(notifications, start=1):
        time_obj = datetime.datetime.fromisoformat(notification_time)
        time_str = time_obj.strftime("%d.%m.%Y %H:%M")

        time_delta = time_obj - datetime.datetime.now()
        minutes = int(time_delta.total_seconds() / 60)
        hours = minutes // 60
        minutes = minutes % 60
        
        if hours > 0 and minutes > 0:
            time_left = f"—á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω"
        elif hours > 0:
            time_left = f"—á–µ—Ä–µ–∑ {hours} —á"
        else:
            time_left = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω"
        
        text += f"{idx}. <b>{notification_text}</b>\n‚è∞ {time_str} ({time_left})\n\n"
    
    keyboard = get_notifications_keyboard(notifications)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )